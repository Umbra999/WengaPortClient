using UnityEngine;
using MelonLoader;
using WengaPort.Api;
using WengaPort.Modules;
using VRC.SDKBase;
using VRCSDK2;
using WengaPort.Extensions;
using WengaPort.FoldersManager;
using Logger = WengaPort.Extensions.Logger;

namespace WengaPort.Buttons
{
    class ExploitMenu
    {
        public static QMNestedButton ThisMenu;
        public static QMSingleButton HalfButton;
        public static QMToggleButton QuestToggle;

        public static void Initialize()
        {
            ThisMenu = new QMNestedButton(MainMenu.ThisMenu, 3.5f, 1f, "Exploits", "Fun/Exploit Utils", null, null, null, Color.yellow);

            new QMToggleButton(ThisMenu, 0, 0, "Pen \nVirus", () =>
            {
                ItemHandler.PenVirus = true;
                MelonCoroutines.Start(ItemHandler.SpreadVirus());
            }, "Disabled", () =>
            {
                ItemHandler.PenVirus = false;
            }, "Crash the lobby with Pens");

            new QMToggleButton(ThisMenu, 0, 1, "Avatar \nSpoof", () =>
            {
                AvatarHider.AvatarSpoofToggle = true;
            }, "Disabled", () =>
            {
                AvatarHider.AvatarSpoofToggle = false;
            }, "Spoof your Avatar Picture to a Cute Cat");

            new QMToggleButton(ThisMenu, 1, 0, "Earrape", () =>
            {
                USpeaker.field_Internal_Static_Single_1 = float.MaxValue;
            }, "Disabled", () =>
            {
                USpeaker.field_Internal_Static_Single_1 = 1f;
            }, "Very loud Mic");

            new QMToggleButton(ThisMenu, 2, 0, "Avatar \nCrash", () =>
            {
                MelonCoroutines.Start(CameraHandler.AvatarCrash(true));
            }, "Disabled", () =>
            {
                MelonCoroutines.Start(CameraHandler.AvatarCrash(false));
            }, "Crash the World with a Avatar");

            new QMToggleButton(ThisMenu, 3, 0, "Infinite \nTimer", () =>
            {
                CameraHandler.TakePicture(int.MaxValue);
            }, "Disabled", () =>
            {
                CameraHandler.Enable();
            }, "Infinite Camera Timer Sound");

            new QMToggleButton(ThisMenu, 4, 0, "Disconnect \nMaster", () =>
            {
                PhotonModule.DisconnectToggle = true;
                MelonCoroutines.Start(PhotonModule.DisconnectLobby());
            }, "Disabled", () =>
            {
                PhotonModule.DisconnectToggle = false;
            }, "Disconnect the current Master");

            new QMToggleButton(ThisMenu, 4, 1, "Emote \nLag", () =>
            {
                PhotonModule.EmoteLagToggle = true;
                MelonCoroutines.Start(PhotonModule.EmoteLag());
            }, "Disabled", () =>
            {
                PhotonModule.EmoteLagToggle = false;
            }, "Lag the Lobby with Emotes");

            new QMToggleButton(ThisMenu, 1, 1, "Mirror \nSpam", () =>
            {
                RoomCleaner.MirrorSpam = true;
                MelonCoroutines.Start(RoomCleaner.SpamMirrors());
            }, "Disabled", () =>
            {
                RoomCleaner.MirrorSpam = false;
            }, "Spam all Mirrors in the World");

            new QMToggleButton(ThisMenu, 1, 2, "Collider \nRemover", () =>
            {
                CameraHandler.FloorRemover = true;
                MelonCoroutines.Start(CameraHandler.PortalColliderRemover());
            }, "Disabled", () =>
            {
                CameraHandler.FloorRemover = false;
            }, "Disable Colliders like Menu/Hitbox");

            new QMToggleButton(ThisMenu, 2, 1, "Drop \nItems", () =>
            {
                ItemHandler.AutoDropItems = true;
                MelonCoroutines.Start(ItemHandler.DropItems());
            }, "Disabled", () =>
            {
                ItemHandler.AutoDropItems = false;
            }, "Auto Drop all Items");

            new QMToggleButton(ThisMenu, 3, 1, "Emoji \nSpam", () =>
            {
                PhotonModule.EmojiSpam = true;
                MelonCoroutines.Start(PhotonModule.EmojiSpammer());
            }, "Disabled", () =>
            {
                PhotonModule.EmojiSpam = false;
            }, "Spam a Emoji");

            object NoItemPickUpEnum = new object();

            new QMToggleButton(ThisMenu, 4, 2, "Disable \nEverything", () =>
            {
                foreach (VRCSDK2.VRC_Pickup vrc_Pickup in Object.FindObjectsOfType<VRCSDK2.VRC_Pickup>())
                {
                    Networking.SetOwner(Utils.CurrentUser.field_Private_VRCPlayerApi_0, vrc_Pickup.gameObject);
                    vrc_Pickup.transform.position = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);
                }
            }, "Disabled", () =>
            {
                foreach (VRC_ObjectSync vrc_ObjectSync in ItemHandler.World_ObjectSyncs)
                {
                    Networking.SetOwner(Utils.CurrentUser.field_Private_VRCPlayerApi_0, vrc_ObjectSync.gameObject);
                    vrc_ObjectSync.Respawn();
                }
            }, "Disable Everything (Menu, Floor, Items)");

            HalfButton = new QMSingleButton(ThisMenu, 5, 1.75f, "Change \nPedestals", () =>
            {
                RoomCleaner.ChangePedestals("avtr_f9f09b3c-98ef-4329-8046-e5f2e284390f");
            }, "Change all Avatar Pedestals");
            HalfButton.getGameObject().GetComponent<RectTransform>().sizeDelta /= new Vector2(1, 2);

            QuestToggle = new QMToggleButton(ThisMenu, 2, 2, "Quest \nSpoof", () =>
            {
                Create.Ini.SetBool("Toggles", "QuestSpoof", true);
                Logger.WengaLogger("Quest Spoof enabled - Restart your Game to take effect");
            }, "Disabled", () =>
            {
                Create.Ini.SetBool("Toggles", "QuestSpoof", false);
                Logger.WengaLogger("Quest Spoof disabled - Restart your Game to take effect");
            }, "Spoof yourself to Quest Platform");

            new QMToggleButton(ThisMenu, 5, 0, "Connect \nOnly", () =>
            {
                PhotonModule.Invisible = true;
            }, "Disabled", () =>
            {
                PhotonModule.Invisible = false;
            }, "Join yourself without Instantiating");

            new QMToggleButton(ThisMenu, 5, 1, "Invisible \nHide", () =>
            {
                PatchManager.InvisibleHide = true;
                PlayerExtensions.ReloadAvatar(Utils.CurrentUser);
            }, "Disabled", () =>
            {
                PatchManager.InvisibleHide = false;
                PlayerExtensions.ReloadAvatar(Utils.CurrentUser);
            }, "Be Invisible if someone Hides you");

            new QMToggleButton(ThisMenu, 3, 2, "Mini \nHide", () =>
            {
                PatchManager.MiniHide = true;
                PlayerExtensions.ReloadAvatar(Utils.CurrentUser);
            }, "Disabled", () =>
            {
                PatchManager.MiniHide = false;
                PlayerExtensions.ReloadAvatar(Utils.CurrentUser);
            }, "Be a Mini hide Roboter");
        }

        public static void ButtonToggles()
        {
            try
            {
                if (PatchManager.VRMode)
                {
                    SafetyMenu.VRToggle.setToggleState(true, false);
                }
                else
                {
                    SafetyMenu.VRToggle.setToggleState(false, false);
                }
                if (Create.Ini.GetBool("Toggles", "QuestSpoof", true))
                {
                    QuestToggle.setToggleState(true, false);
                }
                else
                {
                    QuestToggle.setToggleState(false, false);
                }
            }
            catch
            { }
        }
    }
}

